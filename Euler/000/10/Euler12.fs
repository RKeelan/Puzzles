module Euler12


(*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
https://projecteuler.net/problem=12
*)

open System.Linq
open Numbers

type triangleNumber = {
    index : int64
    number : int64
    divisors : List<int>
}

// fst is index, snd is the number
let triangleNumbers : seq<triangleNumber> =
    {index = 1L; number = 1L; divisors = [ 1 ] }
    |> Seq.unfold (fun state -> Some(state, {
        index = state.index + 1L;
        number = state.number + state.index + 1L;
        // RK: Here, and in various other places, I cast an int64 to int32. This is to deal with
        // the fact that Util.divisors is not generic with respect to primitive arithmetic types.
        // It seems like this should be possible to do, but I've found it quite vexing so far.
        divisors = Seq.toList (divisors (int32(state.number + state.index) + 1))
    }))

//[<EntryPoint>]
let main argv =
    let exampleTriangleNumbers = triangleNumbers.Take(7).ToList()
    printfn $"The first seven triangle numbers are:"
    for tnum in exampleTriangleNumbers do
        printfn $"{tnum.index} -> {tnum.number}: %A{tnum.divisors} ({tnum.divisors.Length})"

    printfn ""

    let firstWith5 = triangleNumbers.Where(fun n -> n.divisors.Length > 5).First()
    printf $"The first triangle number with over 5 divisors is the {firstWith5.index}th number "
    printfn $"({firstWith5.number}), with {firstWith5.divisors.Length} divisors"
    
    printfn ""

    let n = 500
    let stopWatch = System.Diagnostics.Stopwatch.StartNew()

    let firstWith500 = triangleNumbers.Where(fun t -> t.divisors.Length > n).First()
    printf $"The first triangle number with over 500 divisors is the {firstWith500.index:N0}th number "
    printfn $"({firstWith500.number:N0}), with {firstWith500.divisors.Length:N0} divisors"
    printfn $"It took {stopWatch.Elapsed.TotalMilliseconds:N0} ms to find it." 
    0